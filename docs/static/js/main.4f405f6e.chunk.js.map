{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","QUERY","gql","useQuery","loading","error","data","domains","map","item","index","key","id","name","Tokens","clientToken","ApolloClient","uri","query","client","tokens","symbol","address","Orgs","organisations","count","association","App","className","to","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"szBAeA,SAASA,IAEP,IAAMC,EAAQC,YAAH,KAFG,EAYmBC,YAASF,GAAlCG,EAZM,EAYNA,QAASC,EAZH,EAYGA,MAAOC,EAZV,EAYUA,KACxB,OAAIF,EAAgB,yCAChBC,EAAc,uCAKhB,6BACE,wCACCC,EAAKC,QAAQC,KAAI,SAACC,EAAMC,GAAP,OAChB,yBAAKC,IAAKD,GACN,2BACGD,EAAKG,GADR,KACcH,EAAKI,WAS/B,SAASC,IACP,IAAMC,EAAc,IAAIC,IAAa,CACnCC,IAAK,qEAEDhB,EAAQC,YAAH,KAWX,OACE,kBAAC,IAAD,CAAOgB,MAAOjB,EAAOkB,OAAQJ,IAC5B,YAA+B,IAA5BV,EAA2B,EAA3BA,MAAOD,EAAoB,EAApBA,QAASE,EAAW,EAAXA,KAClB,OAAID,EAAc,SACdD,EAAgB,WAEhBE,EAEA,6BACA,0CACCA,EAAKc,OAAOZ,KAAI,SAACC,EAAMC,GAAP,OACf,yBAAKC,IAAKD,GACR,2BACGD,EAAKY,OADR,KACkBZ,EAAKI,KADvB,KAC+BJ,EAAKa,mBAP5C,KAmBN,SAASC,IACP,IAAMJ,EAAS,IAAIH,IAAa,CAC9BC,IAAK,oEAEDhB,EAAQC,YAAH,KAWX,OACE,kBAAC,IAAD,CAAOgB,MAAOjB,EAAOkB,OAAQA,IAC5B,YAA+B,IAA5Bd,EAA2B,EAA3BA,MAAOD,EAAoB,EAApBA,QAASE,EAAW,EAAXA,KAClB,OAAID,EAAc,SACdD,EAAgB,WAEhBE,EAEA,6BACA,wDACCA,EAAKkB,cAAchB,KAAI,SAACC,EAAMC,GAAP,OACtB,yBAAKC,IAAKD,GACR,2BACGD,EAAKI,KADR,KACgBJ,EAAKG,GADrB,KAC2BH,EAAKgB,MADhC,KACyChB,EAAKiB,uBAPtD,KA2DSC,MAxCf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,gCACE,oDAGA,gDAGA,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,WAAT,WAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,SAAT,WAIN,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC/B,EAAD,OAEF,kBAAC,IAAD,CAAO+B,KAAK,WACV,kBAACjB,EAAD,OAEF,kBAAC,IAAD,CAAOiB,KAAK,SACV,kBAACR,EAAD,WCpJQS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCVAjB,EAAS,IAAIH,IAAa,CAC9BC,IAAK,2DAIPoB,IAASC,OACP,kBAAC,IAAD,CAAgBnB,OAAQA,GACtB,kBAAC,EAAD,OAEJoB,SAASC,eAAe,SDkHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4f405f6e.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from \"apollo-boost\";\nimport { Query } from \"react-apollo\";\nimport ApolloClient from 'apollo-boost';\n// or you can use `import gql from 'graphql-tag';` instead\n\n\nfunction Home() {\n\n  const QUERY = gql`\n    {\n      domains(first: 5) {\n        id\n        name\n        labelName\n        labelhash\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(QUERY);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  // console.log( data.domains.map((item, index) => (index)));\n\n  return (\n    <div>\n      <h2>ENS data</h2>\n      {data.domains.map((item, index) => (\n        <div key={index}>\n            <p>\n              {item.id}: {item.name}\n            </p>\n        \n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction Tokens() {\n  const clientToken = new ApolloClient({\n    uri: 'https://api.thegraph.com/subgraphs/name/protofire/token-registry',\n  });\n  const QUERY = gql`\n  {\n    tokens(first: 50) {\n      address\n      name\n      symbol\n      decimals\n    }\n  }\n`;\n\n  return (\n    <Query query={QUERY} client={clientToken}>\n    {({ error, loading, data }) => {\n      if (error) return \"Error!\";\n      if (loading) return \"Loading!\";\n\n      if (data) {\n        return (\n          <div>\n          <h2>Token data</h2>\n          {data.tokens.map((item, index) => (\n            <div key={index}>\n              <p>\n                {item.symbol}, {item.name}, {item.address}\n              </p>\n            </div>\n          ))}\n        </div>\n        );\n      }\n    }}\n  </Query>\n  );  \n}\n\nfunction Orgs() {\n  const client = new ApolloClient({\n    uri: 'https://api.thegraph.com/subgraphs/name/pacta-app/pacta-ropsten',\n  });\n  const QUERY = gql`\n  {\n    organisations(first: 50) {\n      id\n      count\n      name\n      association\n    }\n  }  \n`;\n\n  return (\n    <Query query={QUERY} client={client}>\n    {({ error, loading, data }) => {\n      if (error) return \"Error!\";\n      if (loading) return \"Loading!\";\n\n      if (data) {\n        return (\n          <div>\n          <h2>Pacta organisations data</h2>\n          {data.organisations.map((item, index) => (\n            <div key={index}>\n              <p>\n                {item.name}, {item.id}, {item.count}, {item.association}\n              </p>\n            </div>\n          ))}\n        </div>\n        );\n      }\n    }}\n  </Query>\n  );\n}\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <header>\n          <h1>\n          Some stats and stuff\n          </h1>\n          <p>\n            Based on thegraph\n          </p>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/tokens\">Tokens</Link>\n            </li>\n            <li>\n              <Link to=\"/orgs\">Orgs</Link>\n            </li>\n          </ul>\n        </header>\n        <hr />\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/tokens\">\n            <Tokens />\n          </Route>\n          <Route path=\"/orgs\">\n            <Orgs />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/ensdomains/ens'\n,\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}